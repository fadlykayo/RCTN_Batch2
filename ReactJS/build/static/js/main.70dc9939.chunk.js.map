{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Content/index.js","pages/Home/index.js","App.js","pages/Login/index.js","serviceWorker.js","index.js"],"names":["Header","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","react_default","a","createElement","className","people","onClick","style","backgroundColor","padding","Component","Footer","Content","location","date","Home","state","tempat","tanggal","setState","_this2","Header_Header","handleClickHeader","Content_Content","handleClickContent","Footer_Footer","App","Home_Home","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8VAMqBA,qBACnB,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,0EAGC,IAAAO,EAAAJ,KACP,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,oBAAYP,KAAKH,MAAMY,QACvBJ,EAAAC,EAAAC,cAAA,UACEG,QAAS,kBAAMN,EAAKP,MAAMa,WAC1BC,MAAO,CAAEC,gBAAiB,OAAQC,QAAS,KAF7C,0BAX0BC,cCFfC,qBACnB,SAAAA,EAAalB,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,GAAAjB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiB,GAAAZ,KAAAH,KACbH,0EAIN,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,2BAR4BO,cCAfE,0LACV,IAAAZ,EAAAJ,KACP,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SAAIP,KAAKH,MAAMoB,UACfZ,EAAAC,EAAAC,cAAA,SAAIP,KAAKH,MAAMqB,MACfb,EAAAC,EAAAC,cAAA,UACEG,QAAS,kBAAMN,EAAKP,MAAMa,WAC1BC,MAAO,CAAEC,gBAAiB,SAAUC,QAAS,KAF/C,yBAP2BC,cCEhBK,qBACnB,SAAAA,IAAc,IAAAf,EAAA,OAAAN,OAAAC,EAAA,EAAAD,CAAAE,KAAAmB,IACZf,EAAAN,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqB,GAAAhB,KAAAH,QAEKoB,MAAQ,CACXX,OAAQ,OACRY,OAAQ,gBACRC,QAAS,oBANClB,mFAWZJ,KAAKuB,SAAS,CACZd,OAAQ,sDAKVT,KAAKuB,SAAS,CACZF,OAAQ,WACRC,QAAS,sDAIJ,IAAAE,EAAAxB,KACP,OACEK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkB,EAAD,CACEhB,OAAQT,KAAKoB,MAAMX,OACnBC,QAAS,kBAAMc,EAAKE,uBAGtBrB,EAAAC,EAAAC,cAACoB,EAAD,CACEV,SAAUjB,KAAKoB,MAAMC,OACrBH,KAAMlB,KAAKoB,MAAME,QACjBZ,QAAS,kBAAMc,EAAKI,wBAGtBvB,EAAAC,EAAAC,cAACsB,EAAD,cAtC0Bf,cCanBgB,SCboBhB,mMDG/B,OACET,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACwB,EAAD,cALUjB,cEKEkB,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.70dc9939.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport \"./style.css\";\n\nexport default class Header extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"header\">\n        <div className=\"navbar\">\n          <p>Header</p>\n          <p>People: {this.props.people}</p>\n          <button\n            onClick={() => this.props.onClick()}\n            style={{ backgroundColor: \"pink\", padding: 10 }}\n          >\n            Change People\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  people: PropTypes.string.isRequired,\n  onClickHandle: PropTypes.func\n};\n","import React, { Component } from 'react';\n\nimport './style.css';\n\nexport default class Footer extends Component {\n  constructor (props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"footer\">\n        <p>Footer</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./style.css\";\n\nexport default class Content extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n        <div className=\"innerContent\">\n          <p>{this.props.location}</p>\n          <p>{this.props.date}</p>\n          <button\n            onClick={() => this.props.onClick()}\n            style={{ backgroundColor: \"orange\", padding: 10 }}\n          >\n            Change Place\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport { Header, Footer, Content } from \"../../components\";\n\nimport \"./style.css\";\n\nexport default class Home extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      people: \"Budi\",\n      tempat: \"Pacific Place\",\n      tanggal: \"19 November 2018\"\n    };\n  }\n\n  handleClickHeader() {\n    this.setState({\n      people: \"Andi\"\n    });\n  }\n\n  handleClickContent() {\n    this.setState({\n      tempat: \"Kota Tua\",\n      tanggal: \"20 November 2019\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Header\n          people={this.state.people}\n          onClick={() => this.handleClickHeader()}\n        />\n\n        <Content\n          location={this.state.tempat}\n          date={this.state.tanggal}\n          onClick={() => this.handleClickContent()}\n        />\n\n        <Footer />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport Home from './pages/Home';\nimport Login from './pages/Login';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n\n        <Home/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nimport Header from '../../components/Header';\n\nimport './style.css';\n\nexport default class Login extends Component {\n  render() {\n    return (\n      <div>\n\n        <Header people={ 'gedung' } onClickHandle={ () => alert('gedung PP') }/>\n\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}